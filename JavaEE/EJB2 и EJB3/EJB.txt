
Определение EJB 

	EJB2 - спецификация (документ, утвержденный как стандарт, описывающий все аспекты технологии). Бины определяются  в файле ejb-jar.XML
	EJB3 - спецификация (документ, утвержденный как стандарт, описывающий все аспекты технологии). определяются при помощи аннотаций. 
	JPA - технология, обеспечивающая объектно-реляционное отображение POJO и предоставляющая API для получения и управления такими объектами. Спецификация JPA является частью спецификации EJB3. Сама JPA ничего не умеет делать сама, а лишь описывает принцип работы провайдеров. JPA описывает интерфейсы, которые должный быть реализованы. Так же в спецификации JPA описываются метаданные отображения и порядок работы провайдеров. В итоге провайдер, реализуя интерфейсы JPA, обеспечивает получение, сохранение и управление объектами. Существует несколько провайдеров, реулизующих интерфейсы JPA: Hibernate, Oracle TopLink, Apache OpenJPA.
	
	JPA состоит из 3 основных частей:
		1. API - интерфейсы пакета javax.persistance - набор интерфейсов, которые позволяют организовывать взаимодействие с провайдером.
		2. JPQL - объектный язык запросов. Отличие от sql заключается в том, что запросы sql строятся к таблицам и их колонкам, а в JPQL запросы строятся к именам классов и их атрибутам. В качестве параметров запросов используется типы данных атрибутов.
		3. Metadata - аннотации над объектами. Анализирую установленные над объектами аннотации JPA поймет какой объект в какую таблицу нужно сохранить. Описание метаданные можно при помощи xml и при помощи аннотаций.
		
	Entity - persistent domain object - основная сущность, которой манипулирует программа (объект бизнес логики).
		Требования JPA к классам бизнес логики:
			1. Entity класс должен быть отмечен аннотацией @Entity или описан в xml файле конфигурации JPA.				
			2. Entity класс должен содержать public или protected конструктор без аргументов. (так же может содержать и конструкторы с аргументами, их наличие не обязательно).
			3. Entity класс должен быть классом верхнего уровня.
			4. Entity класс не может быть Enum или Интерфейсом
			5. Entity класс не может быть final-классом.
			6. Entity класс не может содержать final поля или методы в случае, если он участвует в маппинге.
			7. Если объект Entity будет передаваться по значению как отдельный объект, например через удаленный интерфейс - он должен реализовывать интерфейс Serializable.
			8. Поля Entity класса должны быть private и содержать getter и setter.
			9. Entity класс должен содержать первичный ключ, т.е. атрибут или группу атрибутов, по которым можно однозначено идентифицировать запись этого Entity в базе данных.
	
	
	
	
	
	