	Описание EJB, базовые понятия.
	
	EJB как модель компонентов. 
		
		EJB - спецификация технологии написания и поддержки серверных компонентов, содержащих бизнес-логику. Технология Enterprise JavaBeans (EJB) является серверной компонентной архитектурой для платформы Java, Enterprise Edition (Java EE). Технология EJB позволяет быстро и просто разрабатывать распределенные, транзакционные, безопасные и портативные приложения на основе технологии Java.
		
	
		EJB распознает 2 типа компонентов:

			1. Session bean - сеансовые компоненты. Экземпляр такого компонента доступен только пока выполняется некоторая единица работы и безвозвратно уничтожается в случае аварии или остановки сервера. Может реализовать любую прикладную логику.	Сеансовые компоненты могут вызываться локально или удаленно, посредством Java RMI. Компоненты-одиночки и компоненты без сохранения состояния могут также экспортироваться в виде веб-служб SOAP и REST.			
				- statless session beans (без сохранения состояния). Такой компонент не хранит никакой информации о своем состоянии и представляет прикладные службы, которые выполняют все необходимые действия в рамках единственного запроса. Примерами компонентов без сохранения состояния могут быть реализации таких операций, как перевод средств на кредитную карту или проверка кредитной истории клиента.
				- stateful session beans (с сохранением состояния). Такой компонент автоматически сохраняет свое состояние между обращениями к нему от одного и того же клиента. Типичным примером компонента с сохранением состояния может служить корзина с покупками в интернет-магазине.  Сеансовые компоненты с сохранением состояния завершают свое существование либо по таймауту, либо по явному запросу клиента.
				- singleton. Такой компонент хранит информацию о своем состоянии, они совместно используется всеми клиентами и продолжает свое существование на протяжении всего времени работы приложения. Примером использования может быть использование скидки в интернет магазине, т.к. правила применения скидки как правило фиксированы и распространяются на всех клиентов. Это компонент бюл впервые добавлен в версии EJB 3.1
			2. message-driven beans - компоненты, управляемые сообщениями. Эти компоненты так же реализуют некоторую прикладную логику, но имеют одно важное отличие от Session bean: клиенты никогда не вызывают методы MDB непосредственно. Вместо этого компоненты MDB вызываются для обработки сообщений, отправленных на сервер сообщений, что открывает возможность организовать асинхронный обмен сообщениями между частями системы. В качестве примера сообщения можно привести запрос на пополнение товарных запасов от автоматизированной системы розничной торговли к системе управления поставками.
		
		Подобное деление на Session bean (statless session beans, stateful session beans, singleton) и message-driven beans выполнено для того, чтобы избежать перегрузки их слишком большим количеством служб.
			
			
		Службы EJB:
			1. Регистрация, поиск и внедрение зависимостей  - помогает находить и связывать компоненты.
			2. Управление жизненным циклом 					- Дает возможность выполнять определенные действия в момент перехода 
			3. Поддержка многопоточной модели выполнения 	- все компоненты EJB готовы "из коробки" для использования в многопоточной среде.
			4. Транзакции 									- все компоненты EJB "из коробки" поддерживают механизм транзакций.
			5. Организация пулов 							- EJB создает пул экземпляров компонента, совместно используемых клиентами. В любой момент времени каждый экземпляр может использоваться только одним клиентом. По завершении обслуживания клиента, экземпляр немедленно возвращается в пул для повторного использования, вместо передачи сборщику мусора для утилизации.
			6. Управление состоянием 						- контейнер обеспечивает прозрачное управление состоянием компонентов. Он все операции по обслуживанию сеансов/состояний.
			7. Управление памятью 							- EJB предпринимает определенные действия по оптимизации использования памяти, сохраняя редко используемые компоненты с поддержкой состояния на диске для освобождения памяти.
			8. Обмен сообщениями 							- EJB 3 позволяет создавать компоненты для обработки сообщений.
!!!!		9. Безопасность 								- EJB дает простую возможность обезопасить компоненты.
			10. Планирование 								- В EJB имеется возможность планировать автоматический вызов любых методов EJB с помощью простых циклических таймеров или cron-подобных выражений.
			11. Асинхронная обработка  						- В EJB можно настроить любой метод для вызова в асинхронном режиме.
			12. Интерцепторы								- В EJB 3 добавлена поддержка интерцепторов (interceptors), упрощающих AOP (Aspect-Oriented – аспектно-ориентированное программирование). 
			13. Веб-службы									- EJB 3 поддерживает прозрачную возможность преобразования компонентов в веб-службы типа Simple Access Protocol (SOAP) или Representational State Transfer (REST) с минимальными изменениями в коде или вообще без таковых.
			14. Удаленные взаимодействия					- С помощью EJB 3 можно создавать компоненты с поддержкой удаленного доступа.  EJB 3 позволяет клиентскому коду обращаться к удаленным компонентам, как если бы они были локальными, с помощью механизма внедрения зависимостей (DI).
			15. Тестирование								-  Любые компоненты EJB легко поддаются модульному и интеграционному тестированию с применением встроенных контейнеров в таких фреймворках, как JUnit.
		
		
	ТРАДИЦИОННАЯ ЧЕТЫРЕХУРОВНЕВАЯ АРИХТЕКТУРА JavaEE-приложения.
		
		Уровень представления
				|
				V
		Уровень прикладной логики
				|
				V
		Уровень хранения		
				|
				V
		Уровень базы данных
				
		- Уровень представления - отвечает за отображение графического интерфейса пользователя (GUI -  пользовательского интерфейса, который может быть реализован с применением браузера или отдельного настольного приложения).
		- Уровень прикладной логики - определяет бизнес правила. Получает запросы от уровня представления и содержит основную локигу приложения. Является уровнем, где находятся компоненты, выполняющие различные прикладные операции, такие как учет, поиск и упорядочивание данных, а также обслуживание учетных записей пользователей. Уровень прикладной логики извлекает данные и сохраняет их в базе данных, используя для этого уровень хранения.
		- Уровень хранения - обеспечивает высокоуровневое взаимодействие с БД.
		- Уровень базы данных - СУРБД (систему управления реляционными базами данных).
		
		Цель EJB - обеспечить надежную поддержку компонентов уровня прикладной логики. В типичной системе на основе Java EE, на уровне представления используются
		JSF и CDI, EJB используется на прикладном уровне, а на уровне хранения данных используются JPA и CDI.
		
		
	ПРОБЛЕМНО-ОРИЕНТИРОВАННАЯ АРХИТЕКТУРА
		
		Уровень представления
				|
				V
		Уровень приложения/служб
				|
				V
		Предметный уровень
				|
				V
		Уровень инфраструктуры 
		
		- Уровень представления - отвечает за пользовательский интерфейс и взаимодействия с уровнем служб/приложения. 
		- Уровень служб/приложения - очень тонкий и легковесный, и всего лишь обеспечивает взаимодействия между уровнем представления и предметным уровнем. 
		- Предметный уровень – сложный комплекс компонентов, представляющих модель прикладных данных, состоящих из сущностей, объектов значений, агрегатов, фабрик и репозиториев. 
		- Уровень инфраструктуры - соответствует базе данных или иной технологии хранения данных
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
			
			