
	КОМПОНЕНТЫ С СОХРАНЕНИЕМ СОСТОЯНИЯ
	
	компоненты с сохранением состояния компоненты, который поддерживают хранение промежуточного состояния между вызовами методов. Единственное существенное отличие от компонентов без сохранения состояния заключается в обслуживании их жизненных циклов контейнером. Контейнер гарантирует, что каждый вызов метода будет передаваться одному и тому же экземпляру компонента, хоть удаленному, хоть локальному. 
	
	Общий принцип работы: 
		За каждым клиентом резервируется свой экземпляр компонента. Благодаря этому компонент получает возможность хранить информацию, пока сеанс не будет завершен клиентом или пока не истечет предельное время ожидания. Для всех вызовов от данного клиента, контейнер также гарантирует доступность компонента только из одного потока выполнения. Из за этой возможности, экземпляры компонентов не могут сохраняться в пуле и повторно использоваться другими клиентами. Такой принцип работы может занимать большой объем памяти. Экземпляры сеансовых компонентов с сохранением состояния, удерживаемые большим числом одновременно обслуживаемых пользователей, могут занимать значительные объемы памяти. днако и для этой ситуации существует прием оптимизации, который называется пассивацией (passivation).
		
	Когда используются сеансовые компоненты с сохранением состояния.
		Сеансовые компоненты с сохранением состояния идеально подходят для реализации процедур, состоящих из нескольких этапов, например корзина покупателя.
		
	Пассивизация компонентов с сохранением состояния.
		Под пассивацией подразумевается перемещение экземпляра компонента из оперативной памяти на диск. Компонент просто сериализуется. Активация – это процедура, обратная пассивации.  Как следствие, все переменные экземпляра в компоненте должны быть либо простыми значениями Java, либо объектами, реализующими интерфейс java.io.Serializable, либо должны быть помечены как перемещаемые (transient). Другими словами, когда контейнер замечает, что компонент долгое время не используется - он его пассивизирует.
		
	
	Аннотации:
		@Stateful()		- Пометить POJO как сеансовый компонент с сохранением состояния
		@Resource(name = “jdbc/ActionBazaarDataSource”)
		@PostConstruct	- Обрабатывает событие PostConstruct
		@PostActivate 	- Обрабатывает событие PostActivate
		@PrePassivate	- Обрабатывает событие PrePassivate
		@PreDestroy		- Обрабатывает событие PreDestroy
		@Remove			- Вызов этого метода вызывает уничтожение компонента. 
	
	
	Прикладные интерфейсы компонентов
		Не поддерживают интерфейс конечных точек веб-служб.
		@Local	- поддерживают локальные взаимодействия
		@Remote	- поддерживают удаленные взаимодействия
	
	
	События жизненного цикла
		Контейнер выполняет следующие действия :
			1. В начале нового сеанса контейнер всегда создает новый экземпляр компонента, используя для этого конструктор по умолчанию.
			2. После вызова конструктора контейнер внедряет ресурсы, такие как контексты JPA, источники данных и другие компоненты.
			3. Экземпляр хранится в памяти, в ожидании обращений.
			4. Клиент вызывает прикладной метод через прикладной интерфейс.
			5. Контейнер ожидает очередных запросов на вызовы методов и выполняет их.
			6. Если клиент достаточно долго бездействует, контейнер пассивирует экземпляр компонента (если эта операция поддерживается). Компонент сериализуется и сохраняется на диск.
			7. Если клиент возобновит работу и обратится к пассивированному компоненту, экземпляр будет активирован (прочитан с диска в память).
			8. Если клиент продолжает долго бездействовать, компонент уничтожается.
			9. Если клиент затребовал удалить экземпляр компонента, находящийся в этот момент в пассивированном состоянии, он будет активирован и затем уничтожен и утилизирован сборщиком мусора.
	
	Методы обработки событий компонентов с сохранением состояния:
		@PostConstruct 	– метод, отмеченный этой аннотацией, будет вызываться сразу после вызова конструктора по умолчанию и внедрения всех ресурсов;
		@PrePassivate 	– метод, отмеченный этой аннотацией, будет вызываться перед пассивацией компонента, то есть, непосредственно перед его сериализацией и сохранением на диск;
		@PostActivate 	– метод, отмеченный этой аннотацией, будет вызываться сразу после того, как компонент будет прочитан в память, но перед вызовом любых прикладных методов;
		@PreDestroy 	– метод, отмеченный этой аннотацией, будет вызываться после истечения таймаута или явного вызова клиентом одного из методов с аннотацией @Remove; после этого экземпляр будет передан сборщику мусора для утилизации.
		@Remove			-  сообщает контейнеру, что после выполнения этого метода компонент должен быть уничтожен – клиент больше не нуждается в нем и не будет обращаться к нему в дальнейшем
			
	Эффективное использование сеансовых компонентов с сохранением состояния.
		1. Внимательно выбирайте данные для сохранения в сеансе
		2. Настраивайте пассивацию	
		3. Своевременно удаляйте сеансовые компоненты с сохранением состояния
			
			
			
			
			
			
			
			
			
			
			
			
			