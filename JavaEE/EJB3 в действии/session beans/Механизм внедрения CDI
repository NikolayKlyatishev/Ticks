	
	CDI - универсальный механизм внедрения зависимостей и управления контекстом. Он предоставляет универсальные средства всем API JavaEE.
	Состав CDI:
		1. внедрение зависимостей
		2. автоматическое управление контекстом
		3. ограничение области видимости
		4. спецификаторы, именование компонентов
		5. продюсеры
		6. регистрация/поиск
		7. стереотипы
		8. интерцепторы
		9. декораторы
		10. события. 
	
	
	Простейший способ внедрения компонента в CDI
	---------------------------------------------------------------------------
		@Inject // Внедрение компонента EJB с помощью CDI
		private HelloUserBean helloUser;
	
		void hello(){
			helloUser.sayHello(“Curious George”);
		}
	---------------------------------------------------------------------------
	
	Несмотря на то, что CDI способен находить компонент EJB по его типу, он не может работать с удаленными компонентами EJB. Механизм внедрения EJB (@EJB) различает локальные и удаленные компоненты и возвращает соответствующий тип. Поэтому механизм CDI следует использовать для внедрения, только если это возможно.
	
	
		Отправка сообщения :
	@Inject @JMSConnectionFactory(“jms/QueueConnectionFactory”)
	private JMSContext context; 									// Внедрение JMSContext
	
	@Resource(lookup=”jms/MessageQueue”)
	private Queue queue;
	
	// Внедрение приемника
	public void sendMessage(String txtToSend) {
	// Использование упрощенного API для отправки сообщения
		context.createProducer().send(queue, txtToSend);
	}
	
	
		Прием сообщения :
	// Аннотируется для контейнера как MDB прослушивает “jms/BidQueue”
	@MessageDriven(mappedName=”jms/BidQueue”)
	
	// Класс, реализующий MessageListener для приема сообщений JMS
	public class BidMdb implements MessageListener {
		
		@Resource
		// Внедряет MessageDrivenContext при необходимости
		private MessageDrivenContext mdc;
		
		// Метод, реализующий MessageListener и обрабатывающий сообщения
		public void onMessage(Message inMessage) {
			// обработка сообщения
		}
	}
	
	
	

	@Stateful(passivationCapable=false) атрибут аннотации, препятствуюзий пассивизации - сохранению состояния на диске. Для обязательно пассивизайции этой цели компоненты до EJB3.2 должны были обязательно реализовывать интерфейс Serializable.


	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		
