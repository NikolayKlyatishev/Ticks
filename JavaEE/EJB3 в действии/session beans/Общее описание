
	Общие возможности компонентов.
		
	Асинхронные сеансовые компоненты:
	
		Общий принцип работы:
			EJB Контейрер, при вызове асинхронного метода или метода асинхронного класса - запускает отдельный поток выполнения. Асинхронные методы могут принимать параметры, возвращать значения и возбуждать исключения. Возвращаемые значения могут иметь тип void или java.util.concurrent.Future<V>, соответсвенно, есть 2 варианта использования:
				1. запустить и забыть (void). В случае, если будет вызвано исключение в методе, вызывающий код
				2. запустить и проверить ответ позднее (Future<V>). Только методы, возвращаемые Future<V>  могут декларировать исключение.
			Когда вызывается асинхронный метод, управление тут же возвращается клиенту, еще до того, как произойдет фактический вызов метода. Если метод не имеет возвращаемого значения (метод возвращает тип void), с точки зрения клиента операция будет выполнена по сценарию «запустил и забыл». Если требуется получить результат асинхронной операции или возникнет необходимость отменить ее, асинхронный метод должен возвращать объект Future. В обоих случаях выполнение метода протекает в отдельном потоке. 
			
		Аннотации:
			@Asynchronous - доступна с EJB 3.1 и позволяет методам прикладного интерфейса, вызываемым клиентами действовать асинхронно, в отдельных потоках выполнения. При обнаружении контейнером этой аннотации - запускается отдельный поток выполнения.
		
		Когда следует использовать асинхронные сеансовые компоненты:
			- когда операция выполняется продолжительное время и желательно иметь возможность запустить ее и продолжить заниматься другими делами, не зависящими от того, что произойдет в процессе выполнения этой операции;
			- когда операция выполняется продолжительное время и желательно иметь возможность запустить ее, а позже проверить результат или отменить операцию на полпути;
			
		Возвращаемый тип - Future<V>.
			Доступные методы Future<V>
				- boolean cancel(boolean mayInterruptIfRunning) – отменяет операцию;
				- V get() – возвращает значение и блокируется, пока результат не станет доступен;
				- V get(long timeout, TimeUnit unit) – возвращает результат или null, если результат оказался недоступен в течение  интервала времени;
				- boolean isCancelled() – возвращает true, если операция была отменена;
				- boolean isDone() – возвращает true, если метод завершился.

			С помощью интерфейса Future можно выполнять следующие действия:
				- отменять операцию;
				- извлекать результат вычислений, возможно с определением таймаута, если нет возможности ждать результатов слишком долго;
				- проверять – завершилась ли операция или была ли она отменена.
			
		Эффективное использование асинхронных сеансовых компонентов