
Solution Design		
	Здесь мы опишем игровой опыт викторины, легкий дизайн решения (каждый компонент будет использоваться превосходно в данном учебнике, а не все из них сразу).
	
	игровые впечатления
		На 1-й странице у игрока есть форма для заполнения имени, чтобы начать игру и информацию о том, сколько викторин было сыграно. В реальной жизни количество сыгранных викторин (другими) увеличивается каждый день и должно сохраняться в базе данных, но для учебных целей это число привязано к памяти развертывания и инициализировано до 0. После завершения работы сервера приложений количество сыгранных викторин теряется.
		
		1. Таким образом, чтобы начать викторину игрок должен нажать на кнопку “Пуск!”
		2. Затем автоматически генерируется формула сложения, на которую игрок должен ответить		
		3. Количество сыгранных викторин увеличивается. Это число не привязано к этому же игроку, но увеличивается каждый раз, когда кто-то играет в викторину.		
		4. Если игрок дает хороший ответ, его счет увеличивается, в противном случае викторина заканчивается, и игра перенаправляется на другую страницу, показывая приветствие его по имени и показывая ему его счет и давая ему играть снова:	
		5. Если игрок хочет играть снова, его просят заполнить свое имя снова, как в первом IHM.
		
		В EJB3 дизайнерское решение
			Картинка в каталоге ...\Solution-Design.png
			
		на этой диаграмме я попытался контекстуализировать клиентов и EJBs:
			- Сервер приложений 1: экземпляр WildFly 1, который будет развертывать наши сеансовые компоненты и предоставлять их через бизнес-интерфейсы. Этот же экземпляр может развернуть клиент сеансового компонента. С точки зрения контейнера, мы можем рассматривать этот клиент как локальный, так как он развернут в том же контейнере EJBs.
			
				Важно (!): Позже мы обнаружим, что клиент, находящийся в том же контейнере, не гарантирует использование @Local view для вызова сеансового компонента.
			
			- Сервер приложений 2: экземпляр WildFly 2, который развернет наш второй клиент. На этот раз речь идет об удаленном клиенте, что означает, что клиент и сеансовые компоненты развертываются в разных контейнерах EJBs. В этом случае, конечно, нам нужно, чтобы @Remote view был открыт.
			
			- Автономный клиент: сервер приложений не развертывает клиент. Вместо этого у нас будет поиск JNDI в статическом основном методе
			
		Технические особенности:
			Во время этой серии уроков мы создадим 10 проектов каждый с определенной целью :

				1. Проект Бизнес-Интерфейсов.
				2. Проект Внедрения Сессионных Бобов.
				3. Проект оболочки реализации сеансовых компонентов (цели расцепления).
				4. Реализация бобов сеанса и клиент упакованы в одну и ту же WAR.
				5. Клиент упакован в WAR и нацелен на развертывание в том же контейнере, что и Session Beans WAR.
				6. Клиент упакован в WAR и нацелен быть добавленным в EAR вместе с ejb3-server-war. Это EAR, которое будет развернуто.
				7. Ухо, которое будет упаковывать WAR клиента EJB и WAR сервера EJB.
				8. Утилиты поиска JNDI.
				9. Удаленный клиентский проект WAR, который будет развернут в другом контейнере (Application Server 2).
				10. Автономный клиентский проект (основной класс для вызова EJBs).