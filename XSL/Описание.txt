	Описание XSLT

	XSLT (eXtensible Stylesheet Language Transformations) — язык преобразования XML-документов. При применении таблицы стилей XSLT, состоящей из набора шаблонов, к XML-документу (исходное дерево) образуется конечное дерево, которое может быть сериализовано в виде XML-документа, XHTML-документа (только для XSLT 2.0), HTML-документа или простого текстового файла. XSLT имеет множество различных применений, в основном в области веб-программирования и генерации отчётов. Одной из задач, решаемых языком XSLT, является отделение данных от их представления, как часть общей парадигмы MVC
	
	В процессе выполнения XSLT-преобразования задействованы:
		- один или несколько входных XML-документов;
		- одна или несколько таблиц стилей XSLT;
		- XSLT-процессор;
		- один или несколько выходных документов.
	
	В простейшем случае XSLT-процессор получает на входе два документа — входной XML-документ и таблицу стилей XSLT — и создаёт на их основе выходной документ.
	
	Язык XSLT является декларативным, а не процедурным. Вместо определения последовательности исполняемых операторов, этот язык определяет правила, которые будут применяться во время преобразования. 
	Само преобразование ведётся по фиксированному алгоритму:
	
		- Каждый XSLT-процессор должен выполнить следующие шаги для подготовки к трансформации:
			1. Прочитать таблицу стилей XSLT с помощью XML-парсера и перевести его содержимое в дерево узлов (дерево таблицы стилей), согласно модели данных XPath. Синтаксические ошибки «времени компиляции» определяются на этой стадии. Таблицы стилей могут быть модульными, поэтому все включения (инструкции xsl:include, xsl:import) также будут обработаны на этой стадии с целью объединить все шаблонные правила и иные элементы из других таблиц стилей в единое дерево таблицы стилей.
			2. Прочитать входные данные XML с помощью XML-парсера, перевести его содержимое в дерево узлов (исходное дерево), согласно модели данных XPath. XML-документ может ссылаться на другие XML-источники с помощью вызова функций document(). Эти вызовы обычно обрабатываются во время выполнения, так как их расположение может являться вычисляемым, а вызовы соответствующих функций могут не происходить вовсе. (Пример выше не ссылается на какие-либо другие документы.)
			3. Удалить пустые узлы из таблицы стилей XSLT, кроме тех, которые являются потомками от элементов xsl:text. Это позволяет исключить появление «лишних» пробелов.
			4. Удалить пустые текстовые узлы из исходного дерева, если инструкции xsl:strip-space присутствуют в исходном документе. Это позволяет исключить появление «лишних» пробелов. (Пример выше не использует эту возможность.)
			5. Пополнить XSLT-дерево тремя правилами, которые предоставляют поведение по умолчанию для любых типов узлов, которые могут быть встречены при обработке. 
				- Первое правило — для обработки корневого узла; оно даёт инструкцию процессору обработать каждого потомка корневого узла. 
				- Второе правило — для любых текстовых узлов или узлов атрибутов; он даёт команду процессору сделать копию этого узла в результирующем дереве.
				- Третье правило — для всех узлов комментария и узлов-инструкций обработки; никакой операции не производится. Шаблоны, явно заданные в XSLT, могут перекрывать часть или все шаблоны-правила, заданные по умолчанию. Если шаблон не содержит явных правил, встроенные правила будут применены для рекурсивного обхода исходного дерева и только текстовые узлы будут скопированы в результирующее дерево (узлы атрибутов не будут достигнуты, так как они не являются «детьми» их родительских узлов). Полученный таким образом результат обычно нежелателен, так как он является просто конкатенацией всех текстовых фрагментов из исходного XML-документа.
		- Затем процессор проделывает следующие шаги для получения и сериализации результирующего дерева:
			1. Создаёт корневой узел результирующего дерева.
			2. Обрабатывает корневой узел исходного дерева. Процедура обработки узла описана ниже.
			3. Сериализует результирующее дерево, если необходимо, согласно подсказкам, описанным инструкцией xsl:output.
			
			При обработке узла производятся следующие действия:
				1. Производится поиск наиболее подходящего шаблона правила. Это достигается проверкой соответствия шаблона (который является выражением XPath) для каждого правила, указывая узлы, для которых правило может быть применено. Каждому шаблону процессором назначается относительный приоритет и старшинство для облегчения разрешения конфликтов. Порядок шаблонных правил в таблице стилей также может помочь разрешению конфликтов между шаблонами, которые соответствуют одинаковым узлам, но это не оказывает влияния на порядок, в котором узлы будут обрабатываться.
				2. Template rule contents are instantiated. Элементы в пространстве имён XSLT (обычно имеющие префикс xsl:) трактуются как инструкции и имеют специальную семантику, которая указывает на то, как они должны интерпретироваться. Одни предназначены для добавления узлов в результирующее дерево, другие являются управляющими конструкциями. Не XSLT-элементы и текстовые узлы, обнаруженные в правиле, копируются, «дословно», в результирующее дерево. Комментарии и управляющие инструкции игнорируются.
			
			

	eXtensible Stylesheet Language		
		Язык eXtensible Stylesheet Language состоит из 2-х продъязыков: 
			1. eXtensible Stylesheet Language Transformations (XSLT - расширяемые преобразования языка таблиц стилей)
			2. eXtensible Stylesheet Language - Formatting Objects (XSL-FO - расширяемый язык таблиц стилей - объекты форматирования)
			
		XSLT - XML-документ, который описывает, как должен быть сформирован другой xml-документ. Для работы XSLT необходим документ xml для преобразования и механизм для выполнения преобразования. При этом, в XSLT могут быть переданы дополнительный параметры, которые описывают каким именно образом должно быть выполнено преобразование.
		
		Схема работы:
		
		На вход XML-документ, XSL-stylesheet, Parameters 
		
					=== передаем в ===> 
		
					XSL Transformations 
		
					=== на выходe ===> 
		
		Email message, XML, Plain text, SQL, XHTML, WML, HTML.
		
		
	Процесс трансформирования:
		XSLT рассматривает XML-документ как коллекцию узлов следующих типов:
			
			- Root node
			- Element nodes
			- Attribute nodes
			- Text nodes
			- Processing instruction nodes
			- Comment nodes
		
		XSLT содержит один из нескольких шаблонов, который добавляет при помощи тега <xsl:template/>. Когда XML-документ трансформируется XSLT-ом, процессов читает XML-документ, начиная сверху. Каждый раз, встречая новый узел, процессор пытается найти подходящий шаблон в XSLT. 
			
		Стандартные шаблоны:

			Тип узла: Root 					- стандартный шаблон: Apply templates for child nodes
			Тип узла: Element 				- стандартный шаблон: Apply templates for child nodes
			Тип узла: Attribute 				- стандартный шаблон: Выходное значение Attribute
			Тип узла: Text 					- стандартный шаблон: Выходное значние text
			Тип узла: Processing Instruction - стандартный шаблон: Ничего не выполняет
			Тип узла: Comment 				- стандартный шаблон: Ничего не выполняет
			
		В этом контексте атрибуты не считаются дочерними элементами, поэтому атрибуты игнорируются обработчиком XSLT, если на них явно не ссылается документ XSLT.	
		
		
	
		
		
		
		
		
		
		
		
		