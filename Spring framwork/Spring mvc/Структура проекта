
СХЕМА РАБОТЫ SPRING-MVC ПРИЛОЖЕНИЯ

1. В файле web.xml мы описываем загрузочный параметр контекста, listener и DispetcherServlet, а так же его mapping.

-------------------------------------------------------
    Загрузочный параметр контекста приложения:
        <context-param>
            <param-name>ContextConfigLocation</param-name>
            <param-value>classpath:spring-context.xml</param-value>
        </context-param>

-------------------------------------------------------
    Так же необходимо указать listener - указывает на базовый обработчик всех запросов.

        <listener>
            <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
        </listener>

-------------------------------------------------------
    DispetcherServlet: в этом блоке мы конфигурируем сам сервлет. Именно он будет принимать и обрабатывать (определять какой контроллер должен быть вызван) запросы. Указываем его наименование и используемый класс (servlet-name, servlet-class). Затем указываем параметры инициализации (init-param: имя параметра (<param-name>ContextConfigLocation</param-name>) и файл с описанием (<param-value>/WEB-INF/spring/spring-config.xml</param-value>)

        <servlet>
            <servlet-name>dispatcher</servlet-name>
            <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
            <init-param>
                <param-name>ContextConfigLocation</param-name>
                <param-value>/WEB-INF/spring/spring-config.xml</param-value>
            </init-param>
            <load-on-startup>1</load-on-startup>
        </servlet>

    mapping: Указавыем какой именно servlet будет отвечать за запросы какого типа. Текущий пример говорит, что сервлет dispatcher будет отрабатываться все запросы (/).

        <servlet-mapping>
            <servlet-name>dispatcher</servlet-name>
            <url-pattern>/</url-pattern>
        </servlet-mapping>


2. Переходим к конфигурированию Spring. Конфигурирования выполняется в файле, например spting-context.xml, находится в src->main->resources - spring-context.xml Тут конфигурируем бин, отвечающий за поиск view.

        <bean id="resolver"
            class="org.springframework.web.servlet.view.InternalResourceViewResolver">
            
            <!-- где искать -->
            <property name="prefix" value="/views/"/>
            <!-- что искать -->
            <property name="suffix" value=".jsp"/>
        </bean>

3. Переходим к созданию контроллеров. Контроллер - класс, отвечающий за обработку запросов (выбор классов service (тут собрана логика) и view).
   Для создания контроллера мы должны объявить класс, указать у класса аннотацию @Controller - по этой аннотиции spring поймет, что перед ним контроллер. Далее указываем аннотацию @RequestMapping("/admin") - даная аннотация объясняет spring в случае какого вызова должен быть задействован нужный нам контроллер. 
Полный путь складыватся из Пути публикации ([url-адрес]:[порт]/[строка servlet-mapping (web.xml)]/[@RequestMapping в контроллере]/[@RequestMapping метода в классе]).

    Пример:

    @Controller
        @MappingRequest("/list")
        public class MyController {
            
            @RequestMapping(value="/show", method = RequrstMethod.GET)
            public String show(String s) {
                {...}        
            }
            {...}
        } 

    В итоге, для доступа к контроллеру мы должны указать путь localhost:8888/list/show

4. Контроллеры. в свою очередь, выбирают необходимые service и вызывают их. В сервисах описывается логика работы приложения. 

