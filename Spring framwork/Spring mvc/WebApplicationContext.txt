WebApplicationContext в mvc

DispatcherServlet - является центральным сервлетом, который получает запросы и направляет их соответсвующим контроллерам. Количество экземпряров DispatcherServlet ограничено только здравым слыслом. Создание нескольких диспетчеров может быть обусловлено разным назначением (например, обработкой пользовательских звпросов занимается один диспетчек, а обработку запросов от веб-служб - другой.)

WebApplicationContext - конфигурация для DispatcherServlet. Каждый диспетчер имеет совтственную конфигурацию (на уровне диспетчеров). 
В конфигурации описаны след характеристики уровня сервлета: Контроллеры, поддерживающие сервлет, отображение обработчиков, распознование представлений, интернационализация, оформление темами, проверка достоверности, преобразование типов, форматирование.

Помимо конф. WebApplicationContext уровня сервлетов, в Spring MVC поддерживается корневая конфигурация WebApplicationContext, которая включает конфигурации уровня приложения (в т.ч. для источников данных серверной стороны и безопасности - DAO), уровней обслуживания (service).
Корневая конфигурация WebApplicationContext доступна всем конфигурациям WebApplicationContext уровня сервлетов.


ПРИМЕР:

Предположим, что имеются два экземпляра DispatcherServlet (один - для поддержки пользовательского интерфейса - назовем его сервлетом приложения, а второй - для предоставления служб в форме веб-служб REST другим приложениям, назовем его Сервлет-REST).

В соответсвии с условием, определим корневую конфигурацию WebApplicationContext и конфигурации WebApplicationContext для двух DispatcherServlet. 

Иерархия сервлетов:

1. WebApplicationContext (корневая конфигурация)
					- Источники данных
					- Транзакция
					- Конфигурация постоянства
					- Уровень обслуживания
					- Безопастность
					- Конфигурация АОП
	
	
	->> WebApplicationContext (сервлет приложения)
						- Контроллеры
						- Отображение обработчиков
						- Распознаватель представлений
						- Интернационализация, темами
						- Проверка достоверности
						- Преобразование типов
						- Форматирование
	
	->> WebApplicationContext (сервлет REST)
						- Контроллеры
						- Проверка достоверности
						- Преобразователи сообщений
						- Преобразование типов
						- Форматирование
	
//////////////////////////////////////////////////////////////////////////////////
                        ЖИЗНЕННЫЙ ЦИКЛ ЗАПРОСА SPRING MVC
	
          Request   +-------+       +-------+           +-------------------------------------------------------+
          ========> |       | ====> |       |           |               Общие службы                            |
                    |       |       |       |           |       +-----------------------------------+           |
                    |       |       |       |           |       |   - распознование локали          |           |
                    |       |       |       | ========> |       |   - распознование темы            |           |
                    |       |       |       |           |       |   - Обработка мнодественного со-  |           |
                    |       |       |       |           |       |       держимого (загр. файлов)    |           |
                    |       |       |       |           |       +-----------------------------------+           |
                    |       |       |       |           +-------------------------------------------------------+
                    |       |       |       |           +-----------------------------------------------------------------------+
                    |       |       |       |           |           Контроллер                                                  |
                    |       |       |       |           |       +------------------------------+                                |
                    |       |       |       | ================> |     HandlerMapping           |                                |
                    |       |       |       |           |       +------------------------------+                                |
                    |       |       |       |           |   +-----------+            Обработчик                                 |
                    |       |       |       |           |   |           |       +-------------------------------------------+   |
                    |       |       |       |           |   | HandlerIn-|       |   - Привязка данных                       |   |
                    |       |       |DISPAT-| ============> | tersceptor|       |   - Проверка достоверности, преобразования|   |  
                    | FILTR |       | CHER  |           |   |           | ====> |       типов, форматирование               |   |
                    |       |       |SREVLET|           |   |           |       |   - Обращение к уровню обслуживания       |   |
                    |       |       |       |           |   |           |       |   - Обновление модели состояния           |   |
                    |       |       |       |           |   |           | <==== +-------------------------------------------+   |
                    |       |       |       |           |   |           |                               |                       |
                    |       |       |       |           |   |           |                               V Перехват исключений   |
                    |       |       |       |           |   |           |           +-------------------------------------+     |
                    |       |       |       | <============ |           | <======== |       HandlerExceptionResolver      |     |
                    |       |       |       |           |   |           |           +-------------------------------------+     |
                    |       |       |       |           |   +-----------+                                                       |                                                                  
                    |       |       |       |           +-----------------------------------------------------------------------+
                    |       |       |       |               +-------------------------------+
                    |       |       |       |               |       Представление           |
                    |       |       |       |               |   +-------------------+       |
                    |       |       |       | ================> |   ViewResolver    |       |
                    |       |       |       |               |   +-------------------+       |
                    |       |       |       |               |   +-------------------+       |
           Responce |       |       |       | ================> |       View        |       |
           <======= |       | <==== |       |               |   +-------------------+       |
                    +-------+       +-------+               +-------------------------------+


Описание таблицы:
    FILTR - Фильтр применяется к каждому запросу. 
    
    DISPATCHER SERVLET - сервлет, анализирующий запросы и отправляющий их на обработку соответствующему контроллеру.
    
    ОБЩИЕ СЛУЖБЫ - Общие службы будут применяться к каждому запросу для поддержки предоставления интренационализации, оформления темами и загрузки файлов. Их конфигурация определена в WebApplicationContext сервлета диспетчера.
    
    ОТОБРАЖЕНИЕ ОБРАБОТЧИКОВ - Отображает запрос на обработчик (метод внутри класса контроллера Spring MVC). Начиная с версии Spring 2.5, в большинс­ тве ситуаций конфигурация отображения не требуется, поскольку Spring МУС автоматически регистрирует класс org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping, который отобра­ жает обработчики на основе путей НТТР, выраженных через аннотацию @RequestMapping уровня типа или метода внутри классов контроллеров. 
   
     ПЕРЕХВАТЧИК ОБРАБОТЧИКОВ - В Spring МУС можно зарегистрировать пере­ хватчики для обработчиков, чтобы реализовать общую проверку или логику. Например, перехватчик обработчиков может проверять, вызываются ли обра­ботчики только в рабочие часы.
    
    РАСПОЗНОВАТЕЛЬ ИСКЛЮЧЕНИЙ В ОБРАБОТЧИКАХ - В Spring МУС интерфейс HandlerExceptionResolver (из пакета org. springframework. web. servlet) предназначен для работы с непредвиденными исключениями, возникающи­ ми во время выполнения обработчиков. По умолчанию DispatcherServlet регистрирует класс Def aul tHandlerExceptionResol ver (из пакета org.springframework.web.servlet.mvc.support). Этот распознаватель об­рабатывает определенные стандартные исключения Spring МУС, устанавливая специальный код состояния ответа. Можно также реализовать собственный обработчик исключений, аннотировав метод контроллера с помощью аннота­ции @ExceptionHandler и передав ей в качестве атрибута тип исключения.

    РАСПОЗНОВАТЕЛЬ ПРЕЛСТАВЛЕНИЙ - ViewResol ver в Spring МУС (из па­кета org. springframework. web. servlet) поддерживает распознавание пред­ставлений на основе логического имени, возвращаемого контроллером. Для поддержки различных механизмов распознавания представлений предусмотре­но множество классов реализации. Например, класс UrlBasedViewResolver поддерживает прямое преобразование логических имен в URL. Класс ContentNegotiatingViewResolver обеспечивает динамическое распозна­ вание представлений в зависимости от типа медиа, поддерживаемого клиен­том (ХМL, PDF и JSON). Существует также несколько реализаций для ин­теграции с различными технологиями представлений, такими как FreeMarker (FreeMarkerViewResolver), Yelocity (VelocityViewResolver) и JasperReports (JasperReportsViewResolver).



















	
