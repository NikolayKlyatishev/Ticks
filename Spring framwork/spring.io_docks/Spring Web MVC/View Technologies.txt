 View Technologies
 
Использование технологий просмотра в Spring MVC является модульным, независимо от выбранной технологии, будь то шаблоны разметки Thymeleaf, Groovy, JSP или другие технологии, и в первую очередь зависит от изменения конфигурации. В этой главе рассматриваются технологии View, интегрированные с Spring MVC. Мы предполагаем, что вы уже знакомы с View Resolution.


Thymeleaf

	Thymeleaf-это современный серверный механизм шаблонов Java, который подчеркивает естественные шаблоны HTML, которые можно просмотреть в браузере двойным щелчком, что очень полезно для независимой работы с шаблонами пользовательского интерфейса (например, дизайнером) без необходимости в работающем сервере. Если вы хотите заменить JSP, Thymeleaf предлагает один из самых обширных наборов функций, чтобы сделать такой переход проще. Thymeleaf активно развивается и поддерживается. Более полное введение см. на домашней странице проекта Thymeleaf.
	
	Интеграция Thymeleaf с Spring MVC управляется проектом Thymeleaf. Конфигурация включает несколько объявлений компонентов, таких как ServletContextTemplateResolver, SpringTemplateEngine и ThymeleafViewResolver. См. Thymeleaf + Spring для получения более подробной информации.
	
	
FreeMarker

	Apache FreeMarker-это шаблонный движок для создания любого вида текстового вывода из HTML в электронную почту и другие. Spring Framework имеет встроенную интеграцию для использования Spring MVC с шаблонами FreeMarker.
	
	View Configuration
	
	В следующем примере показано, как настроить FreeMarker в качестве технологии представления:
	
		@Configuration
		@EnableWebMvc
		public class WebConfig implements WebMvcConfigurer {

			@Override
			public void configureViewResolvers(ViewResolverRegistry registry) {
				registry.freemarker();
			}

			// Configure FreeMarker...
			@Bean
			public FreeMarkerConfigurer freeMarkerConfigurer() {
				FreeMarkerConfigurer configurer = new FreeMarkerConfigurer();
				configurer.setTemplateLoaderPath("/WEB-INF/freemarker");
				return configurer;
			}
		}
		
	Ваши шаблоны должны храниться в каталоге, указанном FreeMarkerConfigurer, показанном в предыдущем примере. Учитывая предыдущую конфигурацию, если ваш контроллер возвращает имя представления welcome, Resolver ищет шаблон /WEB-INF/freemarker/welcome.ftl	
		
	FreeMarker Configuration	
	
	Вы можете передать FreeMarker 'Settings' и 'SharedVariables' непосредственно объекту конфигурации FreeMarker (который управляется Spring), установив соответствующие свойства компонента на компоненте FreeMarkerConfigurer. Свойство freemarkerSettings требуется для Java.утиль.Свойства объекта, и свойство freemarkerVariables требует java.утиль.Карта. В следующем примере показано, как это сделать:	
		
			<bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
				<property name="templateLoaderPath" value="/WEB-INF/freemarker/"/>
				<property name="freemarkerVariables">
					<map>
						<entry key="xml_escape" value-ref="fmXmlEscape"/>
					</map>
				</property>
			</bean>
			<bean id="fmXmlEscape" class="freemarker.template.utility.XmlEscape"/>
	
	Подробные сведения о параметрах и переменных, применяемых к объекту конфигурации, см. В документации FreeMarker.	
		
	Form Handling
	
	Spring предоставляет библиотеку тегов для использования в JSP, которая содержит, среди прочего, элемент <spring:bind/>. Этот элемент в первую очередь позволяет формам отображать значения из объектов поддержки форм и показывать результаты неудачных проверок от валидатора на веб-или бизнес-уровне. Spring также имеет поддержку той же функциональности в FreeMarker, с допо	лнительным удобством макросов для генерации самих элементов ввода формы.	


		
Script Views		
	Spring Framework в Spring MVC имеет встроенную поддержку использования любой библиотеки шаблонов, которая может работать поверх JSR-223 Java scripting engine.
		
	Основное правило для интеграции любого другого механизма сценариев заключается в том, что он должен реализовывать интерфейсы ScriptEngine и Invocable.	
		
		
	Requirements - требования:
	У вас должен быть движок скрипта на вашем пути к классам, детали которого зависят от движка скрипта:
		- Движок Nashorn JavaScript поставляется с Java 8+.
		- Для поддержки Ruby должны быть добавлены зависимости JRuby.
		- Для поддержки Python должны быть добавлены зависимости Jython.
		- зависимость org.jetbrains.kotlin:kotlin-script-util и файл META-INF/services/javax.script.ScriptEngineFactory, содержащий строку org.jetbrains.kotlin.script.jsr223.KotlinJsr223JvmLocalScriptEngineFactory должны быть добавлены для поддержки скриптов Kotlin.
		
	Для использования библиотек сценариев js вам необходимо подключить библиотеку. Сделать это можно используя WebJars. 
	
	
	Script Templates скриптовые сценарии.
	Можно объявить компонент ScriptTemplateConfigurer, чтобы указать используемый механизм скриптов, загружаемые файлы скриптов, вызываемые функции для отображения шаблонов и т.д. В следующем примере используются шаблоны Mustache и движок Nashorn JavaScript:
	
		@Configuration
		@EnableWebMvc
		public class WebConfig implements WebMvcConfigurer {

			@Override
			public void configureViewResolvers(ViewResolverRegistry registry) {
				registry.scriptTemplate();
			}

			@Bean
			public ScriptTemplateConfigurer configurer() {
				ScriptTemplateConfigurer configurer = new ScriptTemplateConfigurer();
				configurer.setEngineName("nashorn");
				configurer.setScripts("mustache.js");
				configurer.setRenderObject("Mustache");
				configurer.setRenderFunction("render");
				return configurer;
			}
		}
	
	Контроллер выглядит одинаково как для конфигураций Java так и XML, как показано в следующем примере:
	
		@Controller
		public class SampleController {

			@GetMapping("/sample")
			public String test(Model model) {
				model.addObject("title", "Sample title");
				model.addObject("body", "Sample body");
				return "template";
			}
		}
			
	Функция render вызывается со следующими параметрами:
	
		- String template: содержимое шаблона
		- Map model: модели представления 
		- RenderingContext renderingContext: RenderingContext, предоставляющий доступ к контексту приложения, языковому стандарту, загрузчику шаблонов и URL-адресу (начиная с версии 5.0)
	
	Mustache.render() изначально совместим с этой сигнатурой, поэтому вы можете вызвать ее напрямую.
			

Jackson		
	
	Spring официально поддерживает библиотеку Jackson.
		
	Джексон-основанные представления JSON MVC
	MappingJackson2JsonView использует ObjectMapper библиотеки Джексона для отображения ответа в формате JSON. По умолчанию все содержимое из карты модели (за исключением классов, специфичных для фреймворка) кодируется в JSON. Для случаев, когда содержимое карты необходимо отфильтровать, можно указать определенный набор атрибутов модели для кодирования с помощью свойства modelKeys. Кроме того, можно использовать свойство extractValueFromSingleKeyModel для извлечения и сериализации значения в моделях с одним ключом напрямую, а не в виде карты атрибутов модели	
		
	Вы можете настроить отображение JSON по мере необходимости с помощью предоставленных Jackson аннотаций. Если требуется дополнительный контроль, можно ввести пользовательский ObjectMapper через свойство ObjectMapper для случаев, когда необходимо предоставить пользовательские сериализаторы JSON и десериализаторы для определенных типов.	
		
	
	Представления XML на основе Джексона
	
	MappingJackson2XmlView использует xmlmapper расширения Jackson XML для отображения содержимого ответа в виде XML. Если модель содержит несколько записей, необходимо явно задать объект для сериализации с помощью свойства modelkey bean. Если модель содержит одну запись, она сериализуется автоматически.

	Вы можете настроить отображение XML по мере необходимости с помощью предоставленных аннотаций JAXB или Jackson. Если требуется дополнительный контроль, можно внедрить пользовательский XmlMapper через свойство ObjectMapper для случаев, когда пользовательский XML необходимо предоставить сериализаторы и десериализаторы для определенных типов.
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		