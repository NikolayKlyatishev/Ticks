REQUEST MAPPING - привязка запросов.
	
	Для сопоставления запросов к методам контроллеров используется аннотация @RequestMapping. Для сопоставления URL-адреса, HTTP-метода, параметров запроса, заголовков и типов данных используются различные атрибуты. Их можно использовать на уровне класса для выражения общих сопоставлений или на уровне метода для сужения до более тонкой настройки сопоставления.
	
	Существуют определенные аннотации для уточнения аннотации @RequestMapping HTTP-запроса по типам запросов:
	
	@GetMapping - тип запроса HTTP-get
	@PostMapping - тип запроса HTTP-post
	@PutMapping - тип запроса HTTP-put
	@DeleteMapping - тип запроса HTTP-delete
	@PatchMapping - тип запроса HTTP-patch
	
	Все вышеперечисленные аннотации по умолчанию являются HTTP методами и могут быть обработаны аннотацией @RequestMapping.
	
	Пример, приведенный ниже демонстрирует детализацию обработки запроса по уровню привязки методов:
		
	@RestController
	@RequestMapping("/persons")
	class PersonController {

		@GetMapping("/{id}")
		public Person getPerson(@PathVariable Long id) {
			// ...
		}

		@PostMapping
		@ResponseStatus(HttpStatus.CREATED)
		public void add(@RequestBody Person person) {
			// ...
		}
	}
	
	1. @RequestMapping("/persons") - привязка на уровке класса контроллера (все http-запросы)
	2. @GetMapping("/{id}") - детализация на уровне метода http-get
	3. @PostMapping - детализация на уровне метода http-post


URI patterns - шаблоны URI
	
	Запросы можно сопоставлять с помощью следующих глобальных шаблонов и подстановочных знаков:
	
	?  - соответствует одному символу
	*  - соответствует нулю или более символов в сегменте пути
	** - сопоставьте ноль или более сегментов пути
	
	Вы можете объявить параметры URI и получить доступ к их значениям с помощью @PathVariable. DI их нам услужливо создаст и подставит, как показано в следующем примере:
	
	@GetMapping("/owners/{ownerId}/pets/{petId}")
	public Pet findPet(@PathVariable Long ownerId, @PathVariable Long petId) {
		// ...
	}
	
	Переменные URI можно объявлять как на уровне класса так и на уровне метода, как показано в следующем примере:
	
	@Controller
	@RequestMapping("/owners/{ownerId}")
	public class OwnerController {

		@GetMapping("/pets/{petId}")
		public Pet findPet(@PathVariable Long ownerId, @PathVariable Long petId) {
			// ...
		}
	}
	
	Переменные URI автоматически преобразуются в соответствующий тип, если тип не найден - создается исключение TypeMismatchException. Простые типы (int, long, Date и т. д.) поддерживаются по умолчанию, и вы можете зарегистрировать поддержку для любого другого типа данных.
	Вы можете явно указать переменные URI (например, @PathVariable ("customId")), или не объявлять, если имя переменной совпадает с именем артибута, и ваш код скомпилирован с отладочной информацией или с флагом компилятора-parameters на Java 8
	
	Синтаксис {varName:regex} - может быть объявлена переменная URI с использованием регулярного выражения. Например, если задан URL "/spring-web-3.0.5.jar", тогда метод в примере извлекает имя, версию и расширение:
	
	
	@GetMapping("/{name:[a-z-]+}-{version:\\d\\.\\d\\.\\d}{ext:\\.[a-z]+}")
	public void handle(@PathVariable String version, @PathVariable String ext) {
		// ...
	}
	
	Шаблоны путей URI могут иметь встроенные параметры ${...}, которые устанавливаются при запуске с помощью PropertyPlaceHolderConfigurer для локальных, системных, средовых и других источников свойств. Это используется, например, для параметризации базового URL-адреса на основе некоторой внешней конфигурации.
	
	
Pattern Comparison - Сравнение шаблонов.
	
	Когда несколько шаблонов соответствуют URL-адресу, их необходимо сравнить, чтобы найти более подходящий шаблон. Это делается с помощью AntPathMatcher.getPatternComparator(string path), который ищет более подходящие модели.
	
	При равном счете выбирается шаблон, имеющий большее количество переменных URI ${...}.
	
	Шаблон, который содержит (/**) исключается из оценки и всегда будет последним. Кроме того, шаблоны префиксов (такие как /public/**) считаются менее специфичными, чем другие шаблоны, которые не имеют двойных подстановочных знаков.
	
	Для получения полной информации см. AntPatternComparator в AntPathMatcher, а также имейте в виду, что вы можете настроить реализацию PathMatcher. 
	См. https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-config-path-matching
	
	
SUFFIX MATCH - суффикс

	По умолчанию Spring MVC использует шаблон с суффиксом (.*), поэтому контроллер привязаный к ("/person") неявно привязан и к ("/person.*"). Затем, расширение файла используется для интерпретации типа данных для использования в ответе (то есть вместо заголовка Accept) — например, /person.pdf, /person.XML и другие.
	
	Чтобы полностью отключить использование расширений файлов, необходимо установить два параметра:
	
		useSuffixPatternMatching(false), see PathMatchConfigurer
		favorPathExtension(false), see ContentNegotiationConfigurer
	См. CVE-2015-5211 для получения дополнительных рекомендаций, связанных с RFD (уязвимость).
	
	Можно сузить сопоставление запроса на основе типа данных запроса, использование атрибута consumes для сужения сопоставления по типу данных:

	@PostMapping(path = "/pets", consumes = "application/json") 
	public void addPet(@RequestBody Pet pet) {
		// ...
	}	
	
	Атрибут consumes также поддерживает выражения отрицания — например,!text/plain означает любой тип данных, отличных от text/plain
	
	Вы можете объявить общий артибут на уровне класса, однако, в отличие от большинства других атрибутов сопоставления запросов, при использовании на уровне класса метод использует переопределения атрибутов, а не расширяет объявление уровня класса.
	
	MediaType предоставляет константы для часто используемых типов носителей, таких как APPLICATION_JSON_VALUE и APPLICATION_XML_VALUE.


Producible Media Types - Воспроизводимые типы данных

	Сопоставление запросов можно сузить на основе заголовка запроса Accept и списка типов данных, создаваемых методом контроллера, как показано в следующем примере:

		@GetMapping(path = "/pets/{petId}", produces = "application/json;charset=UTF-8") 
		@ResponseBody
		public Pet getPet(@PathVariable String petId) {
		    // ...
		}

	Использование атрибута produces для сужения сопоставления по типу данных.

	Тип носителя может указывать набор символов. Отрицательные выражения поддерживаются — например,!text/plain означает любой тип контента, отличный от "text / plain".


Parameters, headers - Параметры. заголовки.
	
	headers поможет сузить mapping запроса на основании значений параметров запроса.
	Вы можете проверить присутствие параметра в запросе (myParam), отсутствие параметра в запросе (!myParam) и конкретное значение параметра (myParam=myValue).

	Следующий пример демонстрирует как можно проверить значение параметра, params проверяет равенство параметра с именем myParam значению myValue:
	
	@GetMapping(path = "/pets/{petId}", params = "myParam=myValue") 
	public void findPet(@PathVariable String petId) {
	    // ...
	}

	Таким же образом можно проверить заголовок:
	
		// headers проверят значение заколовка
	@GetMapping(path = "/pets", headers = "myHeader=myValue") 
	public void findPet(@PathVariable String petId) {
	    // ...
	}


HTTP HEAD, OPTIONS - заголовок HTTP, опции
	
	Вы можете явно сопоставить метод @RequestMapping с параметрами HTTP HEAD и HTTP, но в общем случае это необязательно.


CUSTOM ANNOTATION - Пользовательские Аннотации
	
	Spring MVC поддерживает использование составленных аннотаций для сопоставления запросов. Это аннотации, которые сами являются мета-аннотированными с помощью @RequestMapping и составлены для повторного объявления подмножества (или всех) атрибутов @RequestMapping с более узкой, более конкретной целью.
	@GetMapping, @PostMapping, @PutMapping, @DeleteMapping и @PatchMapping являются примерами пользовательских аннотаций. Они предоставляются потому, что, возможно, большинство методов контроллера должны быть сопоставлены с определенным методом HTTP по сравнению с использованием @RequestMapping, который по умолчанию соответствует всем методам HTTP. Если вам нужен пример пользовательских аннотаций, посмотрите, как они объявляются.

	Spring MVC также поддерживает пользовательские атрибуты сопоставления запросов с пользовательской логикой сопоставления запросов. Это более продвинутый вариант, который требует подкласса RequestMappingHandlerMapping и переопределения метода getCustomMethodCondition, где можно проверить пользовательский атрибут и вернуть свой собственный RequestCondition.


Explicit Registrations - явная регистрация

	Вы можете программно зарегистрировать методы обработчика, и использовать их для динамических регистраций или подобных случаев, таких как различные экземпляры одного и того же обработчика по разным URL-адресам. 

	В следующем примере регистрируется метод обработчика:

	@Configuration
	public class MyConfig {

		// Инжектим RequestMappingHandlerMapping и UserHandler
		@Autowired
		public void setHandlerMapping(RequestMappingHandlerMapping mapping, UserHandler handler) 
		        throws NoSuchMethodException {

		    // Подготовка метаданных сопоставления запросов
		    RequestMappingInfo info = RequestMappingInfo.paths("/user/{id}").methods(RequestMethod.GET).build(); 

		    // Получаем метод обработчика
		    Method method = UserHandler.class.getMethod("getUser", Long.class); 

		   	// Добавляем регистрацию
		    mapping.registerMapping(info, handler, method); 
			}
	}
