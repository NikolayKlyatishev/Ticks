Handler Methods - методы обработчика.

	Методы обработчика @RequestMapping имеют гибкую сигнатуру и и позволяют указать большое количество поддерживаемых аргументов метода контроллера и возвращаемых значений.

Method Arguments - аргументы метода
	
	В следующей таблице описаны поддерживаемые аргументы метода контроллера. Реактивные типы не поддерживаются ни для каких аргументов.
	Java JDK 8  java.util.Optional поддерживается в качестве аргумента метода в сочетании с аннотациями, которые имеют обязательный атрибут (например, @RequestParam, @RequestHeader и другие) и эквивалентны required=false.

	1. WebRequest, NativeWebRequest - Общий доступ к параметрам запроса и атрибутам запроса и сеанса без прямого использования API сервлета.
	
	2. javax.servlet.ServletRequest, javax.servlet.ServletResponse - Выберите любой конкретный тип запроса или ответа, например ServletRequest, HttpServletRequest или Spring's MultipartRequest, MultipartHttpServletRequest
	
	3. javax.servlet.http.HttpSession - Обеспечивает принудительное присутствие сеанса. Как следствие, такой аргумент никогда не является нулевым. Обратите внимание, что доступ к сеансу не является потокобезопасным. Рассмотрите возможность установки флага synchronizeOnSession экземпляра RequestMappingHandlerAdapter в true, если нескольким запросам разрешено одновременно обращаться к сеансу.
	
	4. javax.servlet.http.PushBuilder - Сервлет 4.0 предоставляет API-интерфейс строителя для программного протокола HTTP/2, ресурс нажатий. Обратите внимание, что в соответствии со спецификацией сервлета введенный экземпляр PushBuilder может иметь значение null, если клиент не поддерживает функцию HTTP/2.
	
	5. java.security.Principal - В настоящее время аутентифицированный пользователь — возможно, определенный основной класс реализации, если он известен.
	
	6. HttpMethod - HTTP-метод запроса.
	
	7. java.util.Locale - Текущая локализация запроса, определяемая наиболее конкретным доступным LocaleResolver (по сути, настроенным LocaleResolver или LocaleContextResolver).
	
	8. java.util.TimeZone + java.time.ZoneId - Часовой пояс, связанный с текущим запросом, определяющийся LocaleContextResolver.
	
	9. java.io.InputStream, java.io.Readerjava.io.InputStream, java.io.Reader - обеспечивает доступ к необработанному телу запроса, предоставляемому Servlet API.
	
	10. java.io.OutputStream, java.io.Writer - Для доступа к необработанному телу ответа, предоставленному API сервлета.
	
	11. @PathVariable - используется для доступа в переменным URI. Позволяет просматривать шаблоны URI.
	
	12. @MatrixVariable - используется для доступа к парам ключ-значение в сегментах пути URI.
	
	13. @RequestParam - Для доступа к параметрам запроса сервлета, включая составные файлы. Значения параметров преобразуются в тип аргумента объявленного метода. См. @RequestParam, а также Multipart. Обратите внимание, что использование @RequestParam является необязательным для простых значений параметров. См. другие аргументы, в конце этой таблицы.
	
	14. @RequestHeader - Для доступа к заголовкам запросов. Значения заголовка преобразуются в тип аргумента объявленного метода. См. Раздел @RequestHeader.
	
	15. @CookieValue - Для доступа к cookies. Значения Cookies преобразуются в тип аргумента объявленного метода. Смотрите @CookieValue.
	
	16. @RequestBody - Для доступа к телу HTTP-запроса. Содержимое тела преобразуется в тип аргумента объявленного метода с помощью реализаций HttpMessageConverter. См. @RequestBody.
	
	17. HttpEntity<B> - Для доступа к заголовкам и телу запроса. Тело преобразуется с помощью HttpMessageConverter. Увидеть HttpEntity.
	
	18. @RequestPart - Для доступа к детали в запросе multipart/form-data преобразование тела детали с помощью HttpMessageConverter. Видеть Составные.
	
	19. java.util.Map, org.springframework.ui.Model, org.springframework.ui.ModelMap - используется для доступа к модели, которая используется в контроллерах HTML и предоставляется шаблонам как часть визуализации view.
	
	20. RedirectAttributes - Укажите атрибуты для использования в случае перенаправления (то есть для добавления в строку запроса) и атрибуты flash, которые будут временно храниться до запроса после перенаправления. Посмотреть атрибуты файлов и Флэш-атрибутами.
	
	21. @ModelAttribute - Для доступа к существующему атрибуту в модели (экземпляр, если он отсутствует) с привязкой и проверкой данных применяется. См. @ ModelAttribute, а также Model и DataBinder. Обратите внимание, что использование @ModelAttribute является необязательным (например, для установки его атрибутов). См. “любой другой аргумент” в конце этой таблицы.
	
	22. Errors, BindingResult - Для доступа к ошибкам из проверки и привязки данных для объекта команды (то есть аргумента @ModelAttribute) или ошибок из проверки аргументов @RequestBody или @RequestPart. Необходимо объявить аргумент Errors или BindingResult сразу после аргумента проверенного метода.
	
	23. SessionStatus + class-level @SessionAttributes - Для завершения обработки формы маркировки, которая запускает очистку атрибутов сеанса, объявленных через аннотацию @SessionAttributes уровня класса. Дополнительные сведения см. В разделе @SessionAttributes.
	
	24. UriComponentsBuilder - Для подготовки URL-адреса относительно хоста текущего запроса, порта, схемы, пути контекста и литеральной части сопоставления сервлетов. Видеть ссылки Ури.
	
	25. @SessionAttribute - Для доступа к любому атрибуту сеанса, в отличие от атрибутов модели, сохраненных в сеансе в результате объявления класса @SessionAttributes. Дополнительные сведения см. В разделе @SessionAttribute.
	
	26. @RequestAttribute - Для доступа к атрибутам запроса. Дополнительные сведения см. В разделе @RequestAttribute.
	
	27. Any other argument - Если аргумент метода не соответствует ни одному из предыдущих значений в этой таблице, и он является простым типом (как определено BeanUtils#isSimpleProperty, он разрешен как @RequestParam. В противном случае он разрешается как атрибут @ModelAttribute.