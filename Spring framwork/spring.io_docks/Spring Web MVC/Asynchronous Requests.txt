Spring MVC имеет обширную интеграцию с асинхронной обработкой запросов Servlet 3.0:

	- DeferredResult и вызываемые возвращаемые значения в методах контроллера и обеспечивают базовую поддержку одного асинхронного возвращаемого значения.
	- Контроллеры могут передавать несколько значений, включая SSE и необработанные данные.
	- Контроллеры могут использовать реактивные клиенты и возвращать реактивные типы для обработки ответов.
	
	
DeferredResult
	
	После включения функции асинхронной обработки запросов в контейнере сервлетов методы контроллера могут обернуть любое поддерживаемое возвращаемое значение метода контроллера с помощью DeferredResult, как показано в следующем примере:
	
		@GetMapping("/quotes")
		@ResponseBody
		public DeferredResult<String> quotes() {
			DeferredResult<String> deferredResult = new DeferredResult<String>();
			// Save the deferredResult somewhere..
			return deferredResult;
		}

		// From some other thread...
		deferredResult.setResult(data);
		
	Контроллер может выдавать возвращаемое значение асинхронно, из другого потока — например, в ответ на внешнее событие (сообщение JMS), запланированную задачу или другое событие.
	
	
	
Интерфейс Callable

	Контроллер может обернуть любое поддерживаемое возвращаемое значение с помощью java.util.concurrent.Callable, как показано в следующем примере:
	
		@PostMapping
		public Callable<String> processUpload(final MultipartFile file) {

			return new Callable<String>() {
				public String call() throws Exception {
					// ...
					return "someView";
				}
			};
		}
		
	Возвращаемое значение может быть получено путем выполнения данной задачи через сконфигурированный TaskExecutor.	
		
Processing...

	Вот очень краткий обзор асинхронной обработки запросов сервлетов:
	
		- ServletRequest можно перевести в асинхронный режим, вызвав request.startAsync(). Основной эффект от этого заключается в том, что сервлет (а также любые фильтры) может завершить работу, но ответ остается открытым, чтобы завершить обработку позже.

		- Звонок на request.startAsync() возвращает AsyncContext, который можно использовать для дальнейшего управления асинхронной обработкой. Например, он предоставляет метод dispatch, который похож на переадресацию из API сервлета, за исключением того, что он позволяет приложению возобновить обработку запроса в потоке контейнера сервлета.
		
		- ServletRequest предоставляет доступ к текущему типу DispatcherType, который можно использовать для различения обработки начального запроса, асинхронной отправки, прямой передачи и других типов диспетчеров.
			
	DeferredResult работает следующим образом:

		- Контроллер возвращает DeferredResult и сохраняет его в некоторую очередь в памяти или список, к которому можно обратиться.
		
		- Spring MVC вызывает request.startAsync().

		- Тем временем DispatcherServlet и все настроенные фильтры выходят из потока обработки запроса, но ответ остается открытым.

		- Приложение устанавливает DeferredResult из некоторого потока, а Spring MVC отправляет запрос обратно в контейнер сервлетов.

		- DispatcherServlet вызывается снова, и обработка возобновляется с асинхронно полученным возвращаемым значением
			
	Callable работает следующим образом:		
		
		- Контроллер возвращает вызываемый объект.

		- Spring MVC вызывает request.startAsync() и отправляет вызываемый объект в TaskExecutor для обработки в отдельном потоке.

		- Тем временем DispatcherServlet и все фильтры выходят из потока контейнера сервлета, но ответ остается открытым.

		- В конце концов вызываемый объект выдает результат, и Spring MVC отправляет запрос обратно в контейнер сервлета для завершения обработки.

		- DispatcherServlet вызывается снова, и обработка возобновляется с асинхронно произведенным возвращаемым значением от Callable объекта.
	

	
HTTP Streaming		
			
	Вы можете использовать DeferredResult и Callable для одного асинхронного возвращаемого значения. Что делать, если вы хотите создать несколько асинхронных значений и записать их в ответ? В этом разделе описывается, как это сделать.
	
	Objects
	Возвращаемое значение ResponseBodyEmitter можно использовать для создания потока объектов, где каждый объект сериализуется с помощью HttpMessageConverter и записывается в ответ, как показано в следующем примере:
		
		@GetMapping("/events")
		public ResponseBodyEmitter handle() {
			ResponseBodyEmitter emitter = new ResponseBodyEmitter();
			// Save the emitter somewhere..
			return emitter;
		}

		// In some other thread
		emitter.send("Hello once");

		// and again later on
		emitter.send("Hello again");

		// and done at some point
		emitter.complete();	
		
	Вы также можете использовать ResponseBodyEmitter в качестве тела в ResponseEntity, позволяя настраивать статус и заголовки ответа	
	Когда эмиттер создает исключение IOException (например, если удаленный клиент ушел), приложения не несут ответственности за очистку соединения и не должны вызывать emitter.complete или emitter.completeWithError. Вместо этого контейнер сервлета автоматически инициирует уведомление об ошибке AsyncListener, в котором Spring MVC выполняет вызов completeWithError. Этот вызов, в свою очередь, выполняет одну заключительную асинхронную отправку в приложение, во время которой Spring MVC вызывает настроенные преобразователи исключений и завершает запрос.	
	
	
	SSE	
	SseEmitter (подкласс ResponseBodyEmitter) обеспечивает поддержку событий, отправленных сервером, где события, отправленные с сервера, форматируются в соответствии со спецификацией W3C SSE. Чтобы создать поток SSE из контроллера, верните SseEmitter, как показано в следующем примере	
	
		@GetMapping(path="/events", produces=MediaType.TEXT_EVENT_STREAM_VALUE)
		public SseEmitter handle() {
			SseEmitter emitter = new SseEmitter();
			// Save the emitter somewhere..
			return emitter;
		}

		// In some other thread
		emitter.send("Hello once");

		// and again later on
		emitter.send("Hello again");

		// and done at some point
		emitter.complete();
	
	Хотя SSE является основным параметром для потоковой передачи в браузеры, обратите внимание, что Internet Explorer не поддерживает события, отправленные сервером. Рассмотрите возможность использования Spring's WebSocket messaging с резервными транспортными средствами SockJS (включая SSE), которые нацелены на широкий спектр браузеров.	
	
	
	Raw Data	
	Иногда бывает полезно обойти преобразование сообщений и передать поток непосредственно в OutputStream ответа (например, для загрузки файла). Для этого можно использовать тип возвращаемого значения StreamingResponseBody, как показано в следующем примере:	
	
		@GetMapping("/download")
		public StreamingResponseBody handle() {
			return new StreamingResponseBody() {
				@Override
				public void writeTo(OutputStream outputStream) throws IOException {
					// write...
				}
			};
		}
	Вы можете использовать StreamingResponseBody в качестве тела в ResponseEntity для настройки состояния и заголовков ответа
	
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	