DispatcherServlet

DispatcherServlet - Spring MVC, как и многие другие веб-фреймворки, разработан вокруг шаблона front controller, где центральный сервлет - DispatcherServlet, предоставляет общий алгоритм обработки запросов, в то время как фактическая работа выполняется настраиваемыми компонентами делегата. Эта модель является гибкой и поддерживает различные рабочие процессы.

DispatcherServlet, как и любой сервлет, должен быть объявлен и сопоставлен в соответствии со спецификацией сервлета с помощью конфигурации Java или в web.xml. В свою очередь, DispatcherServlet использует конфигурацию Spring для обнаружения компонентов делегата, необходимых для сопоставления запросов, разрешения представлений, обработки исключений и т.д. 

Следующий пример конфигурации Java регистрирует и инициализирует DispatcherServlet, который автоматически обнаруживается контейнером сервлета (см. servlet Config):

public class MyWebApplicationInitializer implements WebApplicationInitializer {

    @Override
    public void onStartup(ServletContext servletCxt) {

        // Загрузка конфигурации
        AnnotationConfigWebApplicationContext ac = new AnnotationConfigWebApplicationContext();
        ac.register(AppConfig.class);
        ac.refresh();

        // Добавление и регистрация DispatcherServlet
        DispatcherServlet servlet = new DispatcherServlet(ac);
        ServletRegistration.Dynamic registration = servletCxt.addServlet("app", servlet);
        registration.setLoadOnStartup(1);
        registration.addMapping("/app/*");
    }
}

Следующий пример web.конфигурация xml регистрирует и инициализирует DispatcherServlet

<web-app>

    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>/WEB-INF/app-context.xml</param-value>
    </context-param>

    <servlet>
        <servlet-name>app</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value></param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>app</servlet-name>
        <url-pattern>/app/*</url-pattern>
    </servlet-mapping>

</web-app>