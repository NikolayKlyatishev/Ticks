	Описание HIBERNATE
	
когда мы записываем или читаем данные в/из БД, у нас есть 5 проблем, которые связаны с разницей между объекто-ориентированной (далее – ОО) моделью и реляционной моделью:

1. Наследование - В реляционной модели нет никакого понятия, похожего на наследование, которое является одним из ключевых принципов ООП.
2. Идентификация - Для БД есть только одна сущность, по которому объект может быть идентифицирован – это Первичный Ключ (Primary Key). В то время, как в Java у нас есть такие вещи, как (entity1 == entity2) и (object1.equals(object2)).
3. Ассоциации - В Java мы используем ссылки на объекты для ассоциации, а в реляционной модели – Внешний Ключ (Foreign Key) 
4. Доступ - В Java и в реляционной БД абсолютно разные способы получения доступа в объекту.
5. Инкапсуляция - Крайне часто, при разработке приложений ,вы будете сталкиваться (или уже сталкивались) с тем, что наша ОО модель имеет больше классов, чем таблиц в нашей БД.

	Преимущества, которые нам даёт ORM в сравнение с JDBC?

	 - Позволяет нашим бизнес методам обращаться не к БД, а к Java-классам
	 - Ускоряет разработку приложения
	 - Основан на JDBC
	 - Отделяет SQL-запросы от ОО модели
	 - Позволяет не думать о реализации БД
	 - Сущности основаны на бизнес-задачах, а не на стуктуре БД
	 - Управление транзакциями
 
 
	ORM состоит из:

	 - API, который реализует базовые операции (СОЗДАНИЕ, ЧТЕНИЕ,  ИЗМЕНЕНИЕ, УДАЛЕНИЕ) объектов-моделей.
	 - Средства настройки метаданных связывания
	 - Технику взаимодействия с транзакциями, которая позволяет реализовать такие функции, как dirty checking, lazy association fetching и т.д.
	 
	
	 