----------------------------+
Транзакции.                 |
----------------------------+

Когда мы работает с JDBC, то по умолчанию наше соединение работает в режиме auto-commit, это означает, что каждый SQL – запрос будет выполнен и результаты будут сохранены в таблице нашей базы данных (далее – БД). Для простых приложений это крайне удобно. Но, если мы хотим увеличить производительность, использовать распределённые транзакции, либо интегрировать бизнес-логику, то нам необходимо выключить режим auto-commit для управления нашими транзакциями. Транзакцию дают нам возможность контролировать когда и где сохранять изменения в БД. Благодаря этому мы, например, можем объединить группу SQL – запросов в одну логическую группу и, если один из запросов не пройдёт – мы отменяем всю транзакцию.

Для того, чтобы получить доступ к управлению транзакциями, нам необходимо использовать метод setAutoCommit().

В коде это выглядит следубщим образом:

    connection.setAutoCommit(false);
--------------------------------------------------------------------

Выполнение и откат (Commit and Rollback)

После того, как мы выполнили необходимые нам изменения, мы должны вызвать метод commit() таким образом:

    connection.commit();
--------------------------------------------------------------------

Если же мы хотим выполнить откат изменений, то нам необходимо вызвать метод rollback():

    connection.rollback();
--------------------------------------------------------------------

Точки сохранения (Savepoints)

Начиниая со спецификации JDBC 3.0 интерфейс Savepoint даёт нам ещё больший контроль над транзакциями.   Когда мы используем savepoint, мы определяем точку, до которой произойдёт откат в случае, если нам понадобится отменить изменения.
Для управления этой функцией существует два метода:

    - setSavepoint (String savepointName) - Определяет новую точку сохранения и возвращает экземпляр Savepoint.
    - releaseSavepoint (String savepointName) - Этот метод удаляет точку сохранения. В качестве параметра этот метод принимает экземпляр Savepoint.

