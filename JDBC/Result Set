--------------------------------+
Result Set                      |
--------------------------------+

Данные, полученные в результате выполнения sql-запроса, представлены в виде множества, которое хранится в объекте с именем Result Set.

Интерфейс java.sql.ResultSet представляет собой множетсво результатов, запроса в БД. Экземпляр java.sql.ResultSet имеет указатель, который указывает на текущую строку в полученном мнодестве.

Все методы интерфейса java.sql.ResultSet мы можем разделить на три большие группы:

    - Методы получения данных - методы, использующиеся для просмотра данных конкретной записи, на которую ссылается указатель.
    - Методы изменения данных - методы, использующиеся для изменения данных текущей записи. Эти изменения передаются в используемую БД.
    - Методы навигации - методы, использульзующиеся для перемещения указателя.
    
    Курсор двигается на основе свойств ResultSet. Эти свойства указываются при создании экземпляра ResultSet. Для орпедления этих свойтсв используются следующие методы:

    - createStatement (int RSType, int RSConcurrency);
    - prepareStatement (String SQL, int RSType, int RSConcurrency);
    - prepareCall (String SQL, int RSType, int RSConcurrency);

    Аргумент RSType определяет тип ResultSet, а второй – определяет, используется ли данный экземпляр ResultSet только для чтения, или для чтения и изменения также.
-----------------------------------------------------------------

Типы ResultSet

    Возможные типы ResultSet ниже. Тип TYPE_FORWARD_ONLY используется по умолчанию. Рассмотрим типы:
        - ResultSet.TYPE-FORWARD_ONLY - указатель двигается только вперед по множеству полученных результатов.
        - ResultSet.TYPE_SCROLL_INTENSIVE - указатель может двигаться вперед и назад и не чувсвствителен к изменениям в БД, которые сделаны другими пользователями после того, как ResultSet был создан. 
        - ResultSet.TYPE_SCROLL_SENSITIVE - указатель может двигаться вперед и назад и чувсвствителен к изменениям в БД, которые сделаны другими пользователями после того, как ResultSet был создан.
-----------------------------------------------------------------

Доступ ResultSet

По умолчанию RSConcurrency экземпляра ResultSet установлен тип CONCUR_READ_ONLY, т.е. только для чтения.

Всего существует два типа этого параметра:

        - ResultSet.CONCUR_READ_ONLY - cоздаёт экземпляр ResultSet только для чтения. Устанавливается по умолчанию.
        - ResultSet.CONCUR_UPDATABLE - cоздаёт экземпляр ResultSet, который может изменять данные.

В виде кода, создание экземпляра ResultSet с необходимыми нам параметрами выглядит, примерно так:
       
        try {
            statement = connection.createStatement(
                    ResultSet.TYPE_FORWARD_ONLY,
                    ResultSet.CONCUR_READ_ONLY
            );
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            /*do some job*/
        }        
-----------------------------------------------------------------

Навигация по ResultSet
    
    В интерфейсе java.sql.ResultSet существует несколько методов для перемещения указателя.

Некоторые из них приведены ниже:

    public void beforeFirst () throws SQLException - перемещает указатель на место перед первым рядом.
    public void afterLast () throws SQLException - перемещает указатель на место после крайнего ряда.
    public boolean first () throws SQLException - перемещает указатель на первый ряд.
    public boolean last () throws SQLException - перемещает указатель на крайний ряд.
    public boolean previous () throws SQLException - перемещает указатель на предыдущий ряд. Возвращает false, если предыдущий ряд находится за пределами множества результатов.
    public boolean next () throws SQLException - перемещает указатель на следующий ряд. Возвращает false, если следующий ряд находится за пределами множества результатов.
    public void absolute (int row) throws SQLException - перемещает указатель на указанный ряд.
    public void relative (int row) throws SQLException - перемещает указатель на указанное количество рядов от текущего
    public int getRow () throws SQLException - возвращает номер ряда, на который в данный момент указывает курсор.
    public void moveToInsertRow () throws SQLException - перемещает указатель на ряд в полученном множестве, который может быть использован для того, чтобы добавить новую запись в БД. Текущее положение указателя запоминается.
    public void moveToCurrentRow () throws SQLExcpetion - возвращает указатель обратно на текущий ряд в случае, если указатель ссылается на ряд, в который в данный момент добавляются данные.
-----------------------------------------------------------------

Просмотр результатов ResultSet

Для получения и редактирования данных, в интерфейса ResultSet существует множество методов.

Получение данных возможно как по индексу, так и по имени:

    - public int getInt (int columnIndex) throws SQLException - Возвращает номер текущего ряда с указанным индексом колонки. Индексы начинаются с 1. Т.е. первая – 1, вторая – 2 и т.д.
    - public int getInt (String columnName) throws SQLException Возвращает целое число в текущем ряду с колонкой с именем, переданном в параметре columnName.
-----------------------------------------------------------------

Редактирование данных ResultSet

Для редактирования данных, в интерфейсе java.sql.ResultSet, также разработано множество методов.

Мы можем изменять данные, как по имени, так и по индексу колонки:

    - public void updateString (int columnIndex, String s) throws SQLException - Изменяет строку в указанной колонке.
    - public void updateString (String columnName, String s) throws SQLException - Изменяет строку в колонке с указанным именем.
    
Мы также можем работать с рядами в таблице БД:

    - public void insertRow() - Вставляет запись в таблицу БД. Может быть использован только в том случае, когда указатель ссылается на ряд для вставки.
    - public void updateRow() - Изменяет текущий ряд в таблице БД.
    - public void deleteRow() - Удаляет текущий ряд из таблицы БД.
      
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    


